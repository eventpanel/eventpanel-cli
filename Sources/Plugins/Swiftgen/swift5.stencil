// swiftlint:disable all
// Generated using EventPanel â€” https://github.com/eventpanel/eventpanel-cli

{% if files %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set eventClassName %}{{param.eventClassName|default:"AnalyticsEvent"}}{% endset %}
import Foundation
{% macro fileBlock file %}
  {% call documentBlock file file.document %}
{% endmacro %}
{% macro documentBlock file document %}
  {% call categoriesBlock document %}
{% endmacro %}
{% macro categoriesBlock document %}
  {% for category in document.data.categories %}
  {% if param.documentation %}
  {% call categoryDocumentationBlock category %}
  {% endif %}
  {{accessModifier}} enum {{category.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% call categoryBlock document category.id %}
  }
  {% endfor %}
  {% for event in document.data.events %}
  {% if event.category_ids.count == 0 %}
    {% call eventBlock event %}
  {% endif %}
  {% endfor %}
{% endmacro %}
{% macro customTypesBlock document %}
  {% for customType in document.data.custom_types %}
  {% if customType.type == "enum" %}
  {{accessModifier}} enum {{customType.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}: {{customType.data_type}} {
    {% for case in customType.cases %}
    case {{case|swiftIdentifier:"pretty"|lowerFirstWord}} = "{{case}}"
    {% endfor %}
  }
  {% endif %}
  {% endfor %}
{% endmacro %}
{% macro categoryDocumentationBlock category %}
  {% if category.description.count > 0 %}
  /// {{category.description}}
  {% endif %}
{%- endmacro %}
{% macro eventDocumentationBlock event %}
  {% if event.description.count != 0 %}
  /// {{event.description}}
  {% endif %}
  {% for property in event.properties %}
  {% if property.description.count > 0 %}
  /// - Parameters:
  {% break %}
  {% endif %}
  {% endfor %}
  {% for property in event.properties %}
  {% if property.description.count > 0 %}
  ///     - {{property.name}}: {{property.description}}
  {% endif %}
  {% endfor %}
{%- endmacro %}
{% macro propertyType property %}
  {%- if property.type == "enum" -%}
    {{property.name|swiftIdentifier:"pretty"}}
  {%- else -%}
    {{property.data_type|swiftIdentifier:"pretty"}}
  {%- endif -%}
{% endmacro %}
{% macro typeBlock property -%}
  {%- if property.required -%}
  {% call propertyType property %}
  {%- else -%}
  {% call propertyType property %}?
  {%- endif -%}
{%- endmacro -%}
{% macro categoryBlock document categoryId %}
  {% for event in document.data.events %}
    {% for eventCategoryId in event.category_ids %}
    {% if eventCategoryId == categoryId +%}
    {% filter indent:2," ",true %}{% call eventBlock event %}{% endfilter %}
    {% break %}
    {% endif%}
    {% endfor %}
  {% endfor %}
{% endmacro %}
{% macro eventBlock event %}
  {% set functionName %}{{event.name|swiftIdentifier:"pretty"|lowerFirstWord}}{% endset %}
  {% set arguments %}{% call eventArgumentsBlock event.properties %}{% endset %}
  {% set functionBody %}{% call eventInstanceBlock event %}{% endset %}
  {% if param.documentation %}
  {%- call eventDocumentationBlock event %}
  {% endif %}
  {% if event.properties.count > 0 %}
  {{accessModifier}} static func {{functionName}}(
  {%- filter indent:2," ",true %}{{arguments}}{% endfilter %}
  ) -> {{eventClassName}} {
  {% else %}
  {{accessModifier}} static func {{functionName}}() -> {{eventClassName}} {
  {% endif %}
  {% filter indent:2," ",true %}{{functionBody}}{% endfilter %}
  }
{% endmacro %}
{% macro eventInstanceBlock event %}
  {{eventClassName}}(
  {% filter indent:2," ",true %}
  name: "{{event.name}}",
  parameters: {%+ call eventPropertiesBlock event.properties +%}
  {% endfilter %}
  )
{% endmacro %}
{% macro eventArgumentsBlock properties %}
  {% if properties.count > 0 +%}
  {% for property in properties %}
  {% set type %}{% call typeBlock property %}{% endset %}
  {{property.name|swiftIdentifier:"pretty"|lowerFirstWord}}: {{type}}{{ "," if not forloop.last }}
  {% endfor %}
  {% endif %}
{% endmacro %}
{% macro eventPropertiesBlock properties %}
  {%- if not properties -%}
  [:]
  {%- else -%}
  [
  {% filter indent:2," ",true %}
  {% for property in properties %}
  "{{property.name}}": {{property.name|swiftIdentifier:"pretty"|lowerFirstWord}}{{ "," if not forloop.last }}
  {% endfor %}
  {% endfilter %}
  ]{% for property in properties %}{% if not property.required and not property.value %}.byExcludingNilValues(){% break %}{% endif %}{% endfor %}
  {% endif %}
{% endmacro %}

{{accessModifier}} enum {{param.enumName|default:"GeneratedAnalyticsEvents"}} {
  {% if files.count > 1 or param.forceFileNameEnum %}
  {% for file in files %}
  {{accessModifier}} enum {{file.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% filter indent:2," ",true %}{% call fileBlock file %}{% endfilter %}
  }
  {% endfor %}
  {% else %}
  {% call fileBlock files.first %}
  {% endif %}
}
{% for file in files %}
{% if file.document.data.custom_types.count > 0 %}

extension {{param.enumName|default:"GeneratedAnalyticsEvents"}} {
  {% filter indent:2," ",true %}{% call customTypesBlock file.document %}{% endfilter %}
}
{% endif %}
{% endfor %}

private extension Dictionary where Value == Any? {
  /// Returns dictionary with filtered out `nil` and `NSNull` values
  func byExcludingNilValues() -> [Key: Any] {
    return compactMapValues { value -> Any? in
      value is NSNull ? nil : value
    }
  }
}
{% if param.shouldGenerateType %}

{{accessModifier}} struct {{eventClassName}} {
  {{accessModifier}} let name: String
  {{accessModifier}} let parameters: [String: Any]

  {{accessModifier}} init(name: String, parameters: [String: Any] = [:]) {
    self.name = name
    self.parameters = parameters
  }
}
{% endif %}
{% else %}
// No files found
{% endif %}
// swiftlint:enable all
